ssh-keygen -t ed25519 -C "your-email@example.com"
  573  cat /home/linuxuser/.shh/id_ed25519
  574  cat /home/linuxuser/.shh/id_ed25519.pub
  575  cat /home/linuxuser/.ssh/id_ed25519.pub
  576  ssh -T git@github.com
  577  ls .git
  578  rm -rf .git
  579  ls
  580  git init
  581  ls
  582  git status
  583  git add .
  584  git commit -m 'Flask Exp'
  585  git  status
  586  git remote add origin git@github.com:Surkew777/Flask-Exp.git
  587  git branch -M main
  588  git oush -u origin 
  589  git push -u origin 
  590  git status
  591      git push --set-upstream origin main
  592  git push -u origin 
  593  ls
  594  touch mess_up_da_flow
  595  git status
  596  git add mess_up_da_flow 
  597  git status
  598  git push -u origin 
  599  git commit -m 
  600  git commit
  601  git commit -m 'exp mess up'
  602  git push -u origin 
  603  history


######## 

So create a ssh key  ssh-keygen -t ed25519    # this says create a key with t ed25519 algorithm 
paste that into git hub  ssh create new key 

next initiate your git inside the folder you wanna commit 

add everything or use .gitignore file and add files you want ignored, virtual environement and other unneccesary files 

commit the changes 

next 

add the url with the git repo name 

git remote add origin <githib.com/username/github_repo_name # three parameters that's it 

next 
git branch -M main

You are supposed to run git push -u origin # this will however tell you that you do not have an upstream 

so run 

git push --set-upstream origin main  

this is how you will make your initial commit , then after that, you can run git push -u origin as normal


##########  an interesting problem we came  across  

when making manual changes to repos on github, You will run onto problems git hub will complain about 


The issue you're encountering is related to divergent branches. Specifically, your local branch is behind the remote branch, meaning there are commits on the remote repository that you donâ€™t have locally.

Hereâ€™s how to resolve the issue:

Step 1: Fetch and Rebase
Since you configured git config pull.rebase true, Git will attempt to rebase the changes when you pull. This is good for keeping a clean commit history. But it looks like you still need to reconcile the divergence properly.

Pull the latest changes with rebase:

bash
Copy
Edit
git pull --rebase origin main
This command will:

Fetch changes from the remote main branch.
Rebase your local changes on top of the changes from the remote.
If there are merge conflicts, Git will notify you, and youâ€™ll need to manually resolve them. After resolving conflicts, run:

bash
Copy
Edit
git add <resolved-file>
git rebase --continue
Step 2: Push Your Changes
Once youâ€™ve successfully rebased and resolved any conflicts, push your changes to the remote repository:

bash
Copy
Edit
git push origin main
This will update the remote with your changes.

If you prefer to merge (instead of rebase):
If youâ€™d prefer merging instead of rebasing, you can set Git to merge automatically when pulling by using:

bash
Copy
Edit
git config pull.rebase false
Then run git pull and resolve any merge conflicts manually. Afterward, you can push again.

Summary of Commands:
To rebase and pull changes:
bash
Copy
Edit
git pull --rebase origin main
To resolve conflicts (if needed):
bash
Copy
Edit
git add <resolved-file>
git rebase --continue
To push your changes:
bash
Copy
Edit
git push origin main
Try this out and let me know if you run into any issues!








You said:
git pull --rebase origin main
From github.com:Surkew777/git-hub-commands
 * branch            main       -> FETCH_HEAD
Successfully rebased and updated refs/heads/main.
ChatGPT said:
ChatGPT
Great! It looks like you successfully rebased your local branch onto the remote main branch.

Now, you should be able to push your changes:
Push the changes to GitHub:
bash
Copy
Edit
git push origin main
This should now successfully push your local commits to the remote repository on GitHub without any issues. ðŸŽ‰

Let me know if everything works as expected!








